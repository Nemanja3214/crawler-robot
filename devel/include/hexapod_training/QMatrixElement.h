// Generated by gencpp from file hexapod_training/QMatrixElement.msg
// DO NOT EDIT!


#ifndef HEXAPOD_TRAINING_MESSAGE_QMATRIXELEMENT_H
#define HEXAPOD_TRAINING_MESSAGE_QMATRIXELEMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hexapod_training/StateActionPair.h>
#include <std_msgs/Float64.h>

namespace hexapod_training
{
template <class ContainerAllocator>
struct QMatrixElement_
{
  typedef QMatrixElement_<ContainerAllocator> Type;

  QMatrixElement_()
    : pair()
    , reward()  {
    }
  QMatrixElement_(const ContainerAllocator& _alloc)
    : pair(_alloc)
    , reward(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hexapod_training::StateActionPair_<ContainerAllocator>  _pair_type;
  _pair_type pair;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _reward_type;
  _reward_type reward;





  typedef boost::shared_ptr< ::hexapod_training::QMatrixElement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_training::QMatrixElement_<ContainerAllocator> const> ConstPtr;

}; // struct QMatrixElement_

typedef ::hexapod_training::QMatrixElement_<std::allocator<void> > QMatrixElement;

typedef boost::shared_ptr< ::hexapod_training::QMatrixElement > QMatrixElementPtr;
typedef boost::shared_ptr< ::hexapod_training::QMatrixElement const> QMatrixElementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_training::QMatrixElement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_training::QMatrixElement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_training::QMatrixElement_<ContainerAllocator1> & lhs, const ::hexapod_training::QMatrixElement_<ContainerAllocator2> & rhs)
{
  return lhs.pair == rhs.pair &&
    lhs.reward == rhs.reward;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_training::QMatrixElement_<ContainerAllocator1> & lhs, const ::hexapod_training::QMatrixElement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_training

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_training::QMatrixElement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_training::QMatrixElement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_training::QMatrixElement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39b6677d577d14397b6281d04d889aab";
  }

  static const char* value(const ::hexapod_training::QMatrixElement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39b6677d577d1439ULL;
  static const uint64_t static_value2 = 0x7b6281d04d889aabULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_training/QMatrixElement";
  }

  static const char* value(const ::hexapod_training::QMatrixElement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# QMatrixElement.msg\n"
"hexapod_training/StateActionPair pair\n"
"std_msgs/Float64 reward\n"
"\n"
"================================================================================\n"
"MSG: hexapod_training/StateActionPair\n"
"# StateActionPair.msg\n"
"string state\n"
"int32 action\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::hexapod_training::QMatrixElement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pair);
      stream.next(m.reward);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QMatrixElement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_training::QMatrixElement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_training::QMatrixElement_<ContainerAllocator>& v)
  {
    s << indent << "pair: ";
    s << std::endl;
    Printer< ::hexapod_training::StateActionPair_<ContainerAllocator> >::stream(s, indent + "  ", v.pair);
    s << indent << "reward: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.reward);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_TRAINING_MESSAGE_QMATRIXELEMENT_H
