// Generated by gencpp from file hexapod_training/ResultMsg.msg
// DO NOT EDIT!


#ifndef HEXAPOD_TRAINING_MESSAGE_RESULTMSG_H
#define HEXAPOD_TRAINING_MESSAGE_RESULTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hexapod_training
{
template <class ContainerAllocator>
struct ResultMsg_
{
  typedef ResultMsg_<ContainerAllocator> Type;

  ResultMsg_()
    : order(0)
    , reward(0.0)
    , actions()  {
    }
  ResultMsg_(const ContainerAllocator& _alloc)
    : order(0)
    , reward(0.0)
    , actions(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _order_type;
  _order_type order;

   typedef double _reward_type;
  _reward_type reward;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _actions_type;
  _actions_type actions;





  typedef boost::shared_ptr< ::hexapod_training::ResultMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_training::ResultMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ResultMsg_

typedef ::hexapod_training::ResultMsg_<std::allocator<void> > ResultMsg;

typedef boost::shared_ptr< ::hexapod_training::ResultMsg > ResultMsgPtr;
typedef boost::shared_ptr< ::hexapod_training::ResultMsg const> ResultMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_training::ResultMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_training::ResultMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_training::ResultMsg_<ContainerAllocator1> & lhs, const ::hexapod_training::ResultMsg_<ContainerAllocator2> & rhs)
{
  return lhs.order == rhs.order &&
    lhs.reward == rhs.reward &&
    lhs.actions == rhs.actions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_training::ResultMsg_<ContainerAllocator1> & lhs, const ::hexapod_training::ResultMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_training

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_training::ResultMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_training::ResultMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_training::ResultMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_training::ResultMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_training::ResultMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_training::ResultMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_training::ResultMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68ca254f3ffbf2a1605af7da24eb91b4";
  }

  static const char* value(const ::hexapod_training::ResultMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68ca254f3ffbf2a1ULL;
  static const uint64_t static_value2 = 0x605af7da24eb91b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_training::ResultMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_training/ResultMsg";
  }

  static const char* value(const ::hexapod_training::ResultMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_training::ResultMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ResultMsg.msg\n"
"int8 order\n"
"float64 reward\n"
"float64[] actions\n"
;
  }

  static const char* value(const ::hexapod_training::ResultMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_training::ResultMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.order);
      stream.next(m.reward);
      stream.next(m.actions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResultMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_training::ResultMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_training::ResultMsg_<ContainerAllocator>& v)
  {
    s << indent << "order: ";
    Printer<int8_t>::stream(s, indent + "  ", v.order);
    s << indent << "reward: ";
    Printer<double>::stream(s, indent + "  ", v.reward);
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.actions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_TRAINING_MESSAGE_RESULTMSG_H
